# -*- coding: utf-8 -*-
# Generated by Django 1.11b1 on 2017-03-31 22:40
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullName', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filePath', models.CharField(max_length=100)),
                ('title', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='CommonFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fileKind', models.CharField(choices=[('MV', 'Movie'), ('CC', 'Concert'), ('DD', 'Documentary'), ('GG', 'Game'), ('TS', 'TV-Sitcom'), ('TD', 'TV-Drama'), ('AB', 'audio-book'), ('EB', 'e-book'), ('UN', 'unknown')], default='UN', max_length=2)),
                ('fileName', models.CharField(max_length=100)),
                ('year', models.IntegerField(default=0)),
                ('title', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('artist_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='FHLBuilder.Artist')),
            ],
            bases=('FHLBuilder.artist',),
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('commonfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='FHLBuilder.CommonFile')),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FHLBuilder.Collection')),
                ('dislikes', models.ManyToManyField(blank=True, related_name='book_dislikes', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, related_name='book_likes', to=settings.AUTH_USER_MODEL)),
                ('loves', models.ManyToManyField(blank=True, related_name='book_loves', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='book_tags', to='FHLBuilder.Tag')),
            ],
            bases=('FHLBuilder.commonfile',),
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('commonfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='FHLBuilder.CommonFile')),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FHLBuilder.Collection')),
            ],
            bases=('FHLBuilder.commonfile',),
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('artist_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='FHLBuilder.Artist')),
            ],
            bases=('FHLBuilder.artist',),
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('commonfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='FHLBuilder.CommonFile')),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FHLBuilder.Collection')),
                ('dislikes', models.ManyToManyField(blank=True, related_name='game_dislikes', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, related_name='game_likes', to=settings.AUTH_USER_MODEL)),
                ('loves', models.ManyToManyField(blank=True, related_name='game_loves', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='game_tags', to='FHLBuilder.Tag')),
            ],
            bases=('FHLBuilder.commonfile',),
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('commonfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='FHLBuilder.CommonFile')),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FHLBuilder.Collection')),
                ('dislikes', models.ManyToManyField(blank=True, related_name='movie_dislikes', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, related_name='movie_likes', to=settings.AUTH_USER_MODEL)),
                ('loves', models.ManyToManyField(blank=True, related_name='movie_loves', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='movie_tags', to='FHLBuilder.Tag')),
            ],
            bases=('FHLBuilder.commonfile',),
        ),
        migrations.CreateModel(
            name='Musician',
            fields=[
                ('artist_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='FHLBuilder.Artist')),
                ('albums', models.ManyToManyField(blank=True, to='FHLBuilder.Collection')),
                ('concerts', models.ManyToManyField(blank=True, to='FHLBuilder.Movie')),
            ],
            bases=('FHLBuilder.artist',),
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('commonfile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='FHLBuilder.CommonFile')),
                ('track', models.IntegerField()),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='FHLBuilder.Collection')),
                ('dislikes', models.ManyToManyField(blank=True, related_name='song_dislikes', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, related_name='song_likes', to=settings.AUTH_USER_MODEL)),
                ('loves', models.ManyToManyField(blank=True, related_name='song_loves', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='song_tags', to='FHLBuilder.Tag')),
            ],
            bases=('FHLBuilder.commonfile',),
        ),
        migrations.AddField(
            model_name='musician',
            name='songs',
            field=models.ManyToManyField(blank=True, to='FHLBuilder.Song'),
        ),
        migrations.AddField(
            model_name='director',
            name='movies',
            field=models.ManyToManyField(blank=True, to='FHLBuilder.Movie'),
        ),
        migrations.AddField(
            model_name='actor',
            name='movies',
            field=models.ManyToManyField(blank=True, to='FHLBuilder.Movie'),
        ),
    ]
